#!/usr/bin/env python3

import sys

def log_print(out, pre=0, msg='empty message'):
    if out:
        print('\t'*pre + msg)

class check_wc:
    """
    """
    def __init__(self, fnm, debug=False):
        """
        Filename of the *.log generated by `wc -l *` that is described in README.
        """
        self.fnm = fnm
        self.debug = debug
        self.vol = dict()
        self.rd()
        self.wrong_sta = set()
    def rd(self):
        """
        Read data and organize data.
        """
        log_print(True, 0, '# Input data from %s ...' % self.fnm )
        for line in open(self.fnm):
            n_sample, data_fnm = line.strip().split()
            # example of data filename
            # /g/data/my80/proc_mus/States_and_Territories/SA/
            #   Long_period/SA_AusLAMP_MT_Survey_Musgraves_APY_2016_to_2018/
            #   WA/Level_0_Concatinated_Time_Series_ASCII/
            #   WASA327/                  # -3
            #   319/                      # -2
            #   WASA327_161114000000.TP   # -1
            n_sample = int(n_sample)
            sta, day, tmp = data_fnm.split('/')[-3:]
            dat, com = tmp.split('.')
            if sta not in self.vol:
                self.vol[sta] = dict()
            if com not in self.vol[sta]:
                self.vol[sta][com] = dict()
            self.vol[sta][com][day] = {'size': n_sample, 'nm': dat}
            self.rootdir = '/'+'/'.join( open(self.fnm).readline().split()[1].split('/')[:-3] ) + '/'
    def get_path(self, com, sta, day):
        try:
            path = '/'.join( [self.rootdir, sta, day, self.vol[sta][com][day]['nm']] ) +'.'+com
            return path
        except:
            log_print(True, 0, 'Err: cannot find path for file %s %s %s' % (com, sta, day) )
    def check_compare_com_at_same_station(self):
        """
        check whether there are same number of daily recordings for different components
        """
        log_print(True, 0, '# Checking matchness between different components for number of days...')
        for sta, v1 in self.vol.items():
            com_lst = sorted( list(v1.keys()) )
            ndays_lst = [len(v1[com]) for com in com_lst]
            if ndays_lst.count(ndays_lst[0]) != len(ndays_lst):
                log_print(True, 0, 'Err: unmatched number of days between components. %s \n\t %s %s' 
                    % ( sta, 
                        ', '.join(com_lst), 
                        ', '.join( ['%d' % it for it in ndays_lst] ) 
                        ) 
                    )
                self.wrong_sta.add(sta)
    def check_wrong_day_name(self):
        """
        check if there are wrong day folders
        """
        log_print(True, 0, '# Checking wrong day names...')
        for sta, v1 in self.vol.items():
            for com, v2 in v1.items():
                for a_day in v2.keys():
                    for c in a_day:
                        if c not in '0123456789':
                            path = self.get_path(com, sta, a_day)
                            path = path.replace(self.rootdir, '')
                            log_print(True, 1, 'Err: wrong day name. %s' % (path) )
                            self.wrong_sta.add(sta)
                            break
    def check_gap_day(self):
        """
        check if there are gap of days for a component at a station
        """
        log_print(True, 0, '# Checking gap of days...')
        for sta in self.vol:
            for com in self.vol[sta]:
                day_lst = sorted( list(self.vol[sta][com].keys()) )
                try:
                    start = int(day_lst[0]) 
                    for idx, a_day in enumerate(day_lst):
                        if start + idx != int(a_day):
                            log_print(True, 1, 'Err: gap of days. %s %s; %s' % (
                                sta, com, ', '.join(day_lst)
                                ) )
                            self.wrong_sta.add(sta)
                except:
                    log_print(True, 1, 'Err: gap of days. %s %s; %s' % (
                        sta, com, ', '.join(day_lst)
                        ) )
                    self.wrong_sta.add(sta)
    def check_match_samples(self):
        """
        problematic number of samples per day
        """
        log_print(True, 0, '# Checking number of samples per day')
        for sta in self.vol:
            for com in self.vol[sta]:
                day_lst = sorted( list(self.vol[sta][com].keys()) )
                for day in day_lst[1:-1]:  # to get rid of recordings in the first and the final day
                    if self.vol[sta][com][day]['size'] != 86400 and self.vol[sta][com][day]['size'] != 864000:
                        path = self.get_path(com, sta, day)
                        path = path.replace(self.rootdir, '')
                        log_print(True, 1, 'Warning: please the number of samples %d %s' % (self.vol[sta][com][day]['size'], path ))
                        self.wrong_sta.add(sta)
    def run(self):
        self.check_compare_com_at_same_station()
        self.check_wrong_day_name()
        self.check_gap_day()
        self.check_match_samples()
        log_print(True, 0, '\n\n#PLEASE check stations: %s' % (', '.join(self.wrong_sta) )  )
        pass


if __name__ == "__main__":
    ## Maralinga
    app = check_wc('01_workspace/Maralinga.log', debug=True)
    app.run()
